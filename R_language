myvec <- c(1,2,3,4)

#sequences
R> seq(from=3,to=27,by=3)
[1] 3 6 9 12 15 18 21 24 27

R> seq(from=3,to=27,length.out=40)
#By setting length.out to 40, you make the program print exactly 40 evenly spaced numbers from 3 to 27.

#repetition
R> rep(x=c(3,62,8.3),times=3)
[1]  3.0 62.0  8.3  3.0 62.0  8.3  3.0 62.0  8.3
R> rep(x=c(3,62,8.3),each=2)
[1]  3.0  3.0 62.0 62.0  8.3  8.3

#sorting
R> sort(x=c(2.5,-1,-10,3.44),decreasing=FALSE)
[1] -10.00  -1.00   2.50   3.44

#length
R> length(x=c(3,2,8,1))
[1] 4

#subset
R> myvec <- c(5,-2.3,4,4,4,6,8,10,40221,-8)
R> length(x=myvec)
[1] 10
R> myvec[1]
[1] 5
#in this case, delete the first element using negative version
R> myvec[-1]
[1]    -2.3     4.0     4.0     4.0     6.0     8.0    10.0 40221.0    -8.0

#extract several numbers once
R> myvec[c(1,3,5)]
[1] 5 4 4

#vector calculations
R> foo <- 5.5:0.5
R> foo
[1] 5.5 4.5 3.5 2.5 1.5 0.5
R> foo-c(2,4,6,8,10,12)
[1]   3.5   0.5  -2.5  -5.5  -8.5 -11.5
R> bar <- c(1,-1)
R> foo*bar
[1]  5.5 -4.5  3.5 -2.5  1.5 -0.5
R> sum(foo)
[1] 18
R> prod(foo)
[1] 162.4219

#create a matrix
R> A <- matrix(data=c(-3,2,893,0.17),nrow=2,ncol=2)
R> A
     [,1]   [,2]
[1,]   -3 893.00
[2,]    2   0.17

#You can control how R fills in data using the argument byrow
R> matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=FALSE)
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
R> matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=TRUE)
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

#bind can combine data fast: rbind and cbind
R> rbind(1:3,4:6)
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

#subsetting
R> A
     [,1]  [,2] [,3]
[1,]  0.3  91.0 -4.2
[2,]  4.5   0.1  8.2
[3,] 55.3 105.5 27.9
R> A[3,2]
[1] 105.5
R> A[,2]
[1]  91.0   0.1 105.5
R> A[,c(3,1)]
     [,1] [,2]
[1,] -4.2  0.3
[2,]  8.2  4.5
[3,] 27.9 55.3
R> diag(x=A)
[1]  0.3  0.1 27.9

#omitting:You can delete or omit elements from a matrix using negative indexes
R> A[,-2]
     [,1] [,2]
[1,]  0.3 -4.2
[2,]  4.5  8.2
[3,] 55.3 27.9

#overwriting
R> B <- A 
R> B
     [,1]  [,2] [,3]
[1,]  0.3  91.0 -4.2
[2,]  4.5   0.1  8.2
[3,] 55.3 105.5 27.9
R> B[c(1,3),2] <- 900
R> B
     [,1] [,2] [,3]
[1,]  0.3  900 -4.2
[2,]  1.0    2  3.0
[3,] 55.3  900 27.9

#matrix transpose
R> A
		 [,1] [,2] [,3]
[1,]    2    5    2
[2,]    6    1    4
R> t(A)
     [,1] [,2]
[1,]    2    6
[2,]    5    1
[3,]    2    4

#identity matrix
R> A <- diag(x=3)
R> A
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    1    0
[3,]    0    0    1

#apply adition and subtraction to two matirxs is OK when both of them have same dimensions
#Scalar multiplication of a matrix is carried out using the standard arithmetic * operator.

#matrix multiplication need linear algebra background *了解矩阵乘法
R> A <- rbind(c(2,5,2),c(6,1,4))
R> B <- cbind(c(3,-1,1),c(-3,1,5))
R> A%*%B
     [,1] [,2]
[1,]    3    9
[2,]   21    3
R> B%*%A
     [,1] [,2] [,3]
[1,]  -12   12   -6
[2,]    4   -4    2
[3,]   32   10   22

#matirx inversion
R> A <- matrix(data=c(3,4,1,2),nrow=2,ncol=2)
R> A
     [,1] [,2]
[1,]    3    1
[2,]    4    2
R> solve(A)
     [,1] [,2]
[1,]    1 -0.5
[2,]   -2  1.5
R> A%*%solve(A)
     [,1] [,2]
[1,]    1    0
[2,]    0    1

#create an array(high dimensional data structure), the "dim" argument can be altered in any numbers, the fourth number in dim(c(1,2,3,4)) is the times of copy 
R> AR <- array(data=1:24,dim=c(3,4,2)) 
R> AR
,,1
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
 ,,2
	   [,1] [,2] [,3] [,4]
[1,]   13   16   19   22
[2,]   14   17   20   23
[3,]   15   18   21   24

#subset
R> AR[2,,2]
[1] 14 17 20 23

#relational operators
R> 1==2
[1] FALSE
R> 1>2
[1] FALSE
R> 1!=(2+3)
[1] TRUE
R> foo <- c(3,2,1,4,1,2,1,-1,0,3)
R> bar <- c(4,1,2,1,1,0,0,3,0,4)
R> foo==bar
 [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE
R> qux <- foo==bar
R> qux
 [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE
R> any(qux)
[1] TRUE
R> all(qux)
[1] FALSE

#logical operators
R> FALSE||((T&&TRUE)||FALSE)
[1] TRUE
R> !TRUE&&TRUE
[1] FALSE
R> foo
 [1]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE
R> bar
 [1] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
R> foo&bar
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE
R> foo|bar
 [1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
R> foo&&bar
[1] FALSE
R> foo||bar
[1] TRUE
#Notice that the last two results match the first entries of the vectors you got using the short versions of the logical operators.

#logicals are numbers, they’re often represented with TRUE as 1 and FALSE as 0
R> TRUE+TRUE
[1] 2
R> FALSE-TRUE
[1] -1
R> 1&&1
[1] TRUE
R> 1||0
[1] TRUE

#subset
R> myvec <- c(5,-2.3,4,4,4,6,8,10,40221,-8)
R> myvec<0
 [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
R> myvec[myvec<0]
[1] -2.3 -8.0
R> myvec[(myvec>0)&(myvec<1000)]
[1]  5  4  4  4  6  8 10
R> myvec[myvec<0] <- -200
R> myvec
[1] 5 -200 4 4 4 6 8 1040221 -200

#identify the index positions using which
R> which(x=myvec<0)
[1]  2 10

#subset for matrix using the optional argument arr.ind (array indexes)
R> which(x=A>25)
[1] 3 4 6 9
R> which(x=A>25,arr.ind=True)
     row col
[1,]   3   1
[2,]   1   2
[3,]   3   2
[4,]   3   3

#create
R> foo <- "This is a character string!"
R> foo
[1] "This is a character string!"
R> length(x=foo)
[1] 1
R> nchar(x=foo)
[1] 27

#boolean, it can determine whether one string of letters is greater than another with respect to alphabetical order.
R> "alpha"=="alpha"
[1] TRUE
R> "alpha"!="beta"
[1] TRUE
R> "alpha"<="beta"
[1] TRUE
R> "gamma">"Alpha"
[1] TRUE

#concatenation
R> qux
[1] "awesome" "R"       "is"
R> paste(qux[2],qux[3],"totally",qux[1],"!")
[1] "R is totally awesome !"
R> paste(qux[2],qux[3],"totally",qux[1],"!",sep="---")
[1] "R---is---totally---awesome---!"

#escape sequences
R> cat("here is a string\nsplit\tto neww\b\n\n\tlines")
here is a string
split    to new

		lines
R> cat("I really want a backslash: \\\nand a double quote: \"")
I really want a backslash: \
and a double quote: "

#subset
R> foo <- "This is a character string!"
R> substr(x=foo,start=21,stop=27)
[1] "string!"
R> substr(x=foo,start=1,stop=4) <- "Here"
R> foo
[1] "Here is a character string!"
#Substitution is more flexible using the functions sub and gsub.
R> bar <- "How much wood could a woodchuck chuck"
R> sub(pattern="chuck",replacement="hurl",x=bar)
[1] "How much wood could a woodhurl chuck"
R> gsub(pattern="chuck",replacement="hurl",x=bar)
[1] "How much wood could a woodhurl hurl"

#most natural way of representing data points that fit in only one of a finite number of distinct categories
#Factors are typically created from a numeric or a character vector
R> sex.num.fac <- factor(x=sex.num)
R> sex.num.fac
[1] 0 0 0 1 0 1 1 0
Levels: 0 1
R> sex.char.fac <- factor(x=sex.char)
R> sex.char.fac
[1] female female female male   female male   male   female
Levels: female male

#check the values of level
R> levels(x=sex.char.fac)
[1] "female" "male"

#relabel a factor using levels
R> levels(x=sex.num.fac) <- c("1","2")
R> sex.num.fac
[1] 1 1 1 2 1 2 2 1
Levels: 1 2

#subset a factor using a logical flag vector
R> sex.num.fac=="2"
[1] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE

#combine levels
R> new.values
[1] Oct Feb Feb
Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < Oct < Nov < Dec
R> mob.fac
[1] Apr Jan Dec Sep Nov Jul Jul Jun
Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < Oct < Nov < Dec
R> c(mob.fac,new.values)
 [1]  4  1 12  9 11  7  7  6 10  2  2
R> levels(mob.fac)[c(mob.fac,new.values)]
 [1] "Apr" "Jan" "Dec" "Sep" "Nov" "Jul" "Jul" "Jun" "Oct" "Feb" "Feb"

#cut levels
R> br <- c(0,2,4,6)
R> cut(x=Y,breaks=br)
 [1] (0,2] (4,6] (0,2] (2,4] (0,2] (0,2] (0,2] (4,6] (0,2] (0,2]
Levels: (0,2] (2,4] (4,6] 

#The list is an incredibly useful data structure. It can be used to group together any mix of R structures and objects.
#create
R> foo <- list(matrix(data=1:4,nrow=2,ncol=2),c(T,F,T,T),"hello")
R> foo
[[1]]
     [,1] [,2]
[1,]    1    3
[2,]    2    4
[[2]]
[1]  TRUE FALSE  TRUE  TRUE
[[3]]
[1] "hello"
R> length(x=foo)
[1] 3
R> foo[[3]]
[1] "hello"
R> cat(foo[[3]],"you!")
hello you!
R> foo[[c(2,3)]]
[1] TRUE
#using double square brackets on a list is always interpreted with respect to a single member

#name
R> names(foo) <- c("mymatrix","mylogicals","mystring")
R> foo
$mymatrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4
$mylogicals
[1]  TRUE FALSE  TRUE  TRUE
$mystring
[1] "hello you!"
R> foo$mymatrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4

Data Frames**********
#create
R> mydata <- data.frame(person=c("Peter","Lois","Meg","Chris","Stewie"),
                        age=c(42,40,17,14,1),
												sex=factor(c("M","F","F","M","M")),
												stringsAsFactors=FALSE)
R> mydata
  person age sex
1  Peter  42   M
2   Lois  40   F
3    Meg  17   F
4  Chris  14   M
5 Stewie   1   M

#extract
R> mydata[3:5,3]
[1] F M M
Levels: F M
R> mydata$age [1]42 40 17 14 1
R> mydata$age[2]
[1] 40

#size
R> nrow(mydata)
[1] 5
R> ncol(mydata)
[1] 3
R> dim(mydata)
[1] 5 3
R> mydata$person
[1] "Peter"  "Lois"   "Meg"    "Chris"  "Stewie"
#Thanks to stringAsFactors = FALSE,this string isn't treated as factors

#add columns and combine data frames
#rbind and cbind functions can append rows and columns

#logical record subset
R> mydata[mydata$sex=="M",-3]
  person age funny age.mon
1  Peter  42  High     504
4  Chris  14   Med     168
5 Stewie   1  High      12
6  Brian   7   Med      84

# | is OR operator
R> mydata[mydata$age>10|mydata$funny=="High",]

R> mydata[mydata$age>45,]
[1] person  age     sex     funny   age.mon
<0 rows> (or 0-length row.names)
#when there is no records satisfy the condition
