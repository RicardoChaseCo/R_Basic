#attributes

#Each R object you create has additional information about the nature of the object itself. 
#This additional information is referred to as the objectâ€™s attributes
R> foo
                  [,1] [,2] [,3]
             [1,]    1    4    7
             [2,]    2    5    8
             [3,]    3    6    9
R> attributes(foo)
$dim
[1] 3 3
#if you know the name of an attribute, you can also use attr
R> attr(x=foo,which="dim")
[1] 3 3
R> dim(foo)
[1] 3 3
#dim is one of the attribute-specific functions
#The names and levels functions mentioned earlier are also both attribute-specific functions

#use explicit attributes to bulid a matrix
R> bar <- matrix(data=1:9,nrow=3,ncol=3,dimnames=list(c("A","B","C"),
                 c("D","E","F")))
R> bar 
  D E F 
A 1 4 7 
B 2 5 8 
C 3 6 9
R> attributes(bar)
$dim
[1] 3 3
$dimnames
$dimnames[[1]]
[1] "A" "B" "C"
$dimnames[[2]]
[1] "D" "E" "F"

#object class
R> num.vec1 <- 1:4
R> num.vec1
[1] 1 2 3 4
R> num.vec2 <- seq(from=1,to=4,length=6)
R> num.vec2
[1] 1.0 1.6 2.2 2.8 3.4 4.0
R> char.vec <- c("a","few","strings","here")
R> char.vec
[1] "a"       "few"     "strings" "here"
R> logic.vec <- c(T,F,F,F,T,F,T,T)
R> logic.vec
[1]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE
R> fac.vec <- factor(c("Blue","Blue","Green","Red","Green","Yellow"))
R> fac.vec
[1] Blue   Blue   Green  Red    Green  Yellow
Levels: Blue Green Red Yellow
R> class(num.vec1)
[1] "integer"
R> class(num.vec2)
[1] "numeric"
R> class(char.vec)
[1] "character"
R> class(logic.vec)
[1] "logical"
R> class(fac.vec)
[1] "factor"

#except for the vector, regardless of the data type, class reports the structure of the object itself
R> logic.mat <- matrix(data=logic.vec,nrow=4,ncol=2)
R> logic.mat
      [,1]  [,2]
[1,]  TRUE  TRUE
[2,] FALSE FALSE
[3,] FALSE  TRUE
[4,] FALSE  TRUE
R> class(logic.mat)
[1] "matrix"
#class return "matrix" but not "logical"

#Certain objects will have multiple classes, such as an ordered factor vector

#object-checking functions
R> num.vec1 <- 1:4
R> num.vec1
[1] 1 2 3 4
R> is.integer(num.vec1)
[1] TRUE
R> is.numeric(num.vec1)
[1] TRUE
R> is.matrix(num.vec1)
[1] FALSE
R> is.data.frame(num.vec1)
[1] FALSE
R> is.vector(num.vec1)
[1] TRUE
R> is.logical(num.vec1)
[1] FALSE

#as-dot coercion
R> 1:4+c(T,F,F,T)
[1] 2 2 3 5
#the logical vector is not in this form, the software internally coerces it to ones and zeros before completing the task
R> as.numeric(c(T,F,F,T))
[1] 1 0 0 1
R> foo <- 34
R> foo.ch <- as.character(foo)
R> foo.ch
[1] "34"
R> as.logical(c("1","0","1","0","0"))
[1] NA NA NA NA NA
R> as.logical(as.numeric(c("1","0","1","0","0")))
[1]  TRUE FALSE  TRUE FALSE FALSE
R> baz <- factor(x=c("male","male","female","male"))
R> baz
[1] male   male   female male
Levels: female male
R> as.numeric(baz)
[1] 2 2 1 2

R> bar <- array(data=c(8,1,9,5,5,1,3,4,3,9,8,8),dim=c(2,3,2)) R> bar
,,1
     [,1] [,2] [,3]
[1,]    8    9    5
[2,]    1    5    1
,,2
     [,1] [,2] [,3]
[1,]    3    3    8
[2,]    4    9    8
R> as.matrix(bar)
     [,1]
[1,]   8
[2,]   1
[3,]   9
[4,]   5
[5,]   5
[6,]   1
[7,]   3
[8,]   4
[9,]   3
[10,]  9
[11,]  8
[12,]  8
R> as.vector(bar)
 [1] 8 1 9 5 5 1 3 4 3 9 8 8
#when all members have same length, list can be transited to data.frame
